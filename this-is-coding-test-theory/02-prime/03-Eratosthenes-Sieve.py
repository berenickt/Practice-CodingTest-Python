"""에라토스테네스의 체(Eratosthenes Sieve)
여러개의 수가 소수인지 아닌지를 판별할 때 사용하는 대표적인 알고리즘

동작원리는 다음과 같다.
1. 2부터 N까지의 모든 자연수를 나열한다.
2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
3. 남은 수 중에서 i의 배수를 모두 제거한다. (i는 제거하지 않는다.)
4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복한다.

예제에서는 N = 1,000으로 설정했다. 
이때, i는 N의 제곱근(가운데 약수)까지만 증가시켜 확인하면 된다.
"""
import math

# 2부터 n까지 모든 수에 대한 소수 판별
n = 1000

# 처음 모든 수가 소수(True)로 초기화(0, 1 제외)
array = [True for _ in range(n + 1)]

# 2부터 n의 제곱근까지 모든 수를 확인
for i in range(2, int(math.sqrt(n)) + 1):
    # i가 소수인경우(False를 제외하고 남은 수인 경우)
    if array[i] == True:
        # i를 제외한 i의 모든 배수를 지우기
        j = 2
        while i * j <= n:
            array[i * j] = False
            j = j + 1

# 모든 소수 출력
for i in range(2, n + 1):
    if array[i]:
        print(i, end=" ")

"""
에라토스테네스의 체 알고리즘의 시간 복잡도는 O(NloglogN)으로 
사실상 선형 시간에 동작할 정도로 빠르다.
예를 들어, N = 1,000,000일때는 4,000,000정도가 될 것이다.

이처럼 에라토스테네스의 체 알고리즘은 매우 빠르게 동작하기 때문에 
다수의 소수를 찾아야 하는 문제에서 자주 사용된다. 
다만, 메모리 할당이 많이 필요한데, 
알고리즘에서 N의 크기만큼 리스트를 할당하기 때문이다.
예를 들어, N = 1,000,000일때는 2 ~ 1,000,000 까지의 리스트가 필요하다.

따라서, 에라토스테네스의 체를 이용하는 문제의 경우 
N < 1,000,000 이내로 주어지는 경우에 사용하자.
"""
