"""
오늘 동빈이는 여행 가신 부모님을 대신해서 떡집 일을 하기로 했다.
오늘은 떡볶이 떡을 만드는 날이다.
동빈이네 떡볶이 떡은 재밌게도 떡볶이 떡의 길이가 일정하지 않다.

대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰준다.
절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단한다.
높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않는다.

e.g. 높이가 19, 14, 10, 17cm 인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면
자른 뒤 떡의 높이는 15, 14, 10, 15cm가 될 것이다.
잘린 떡의 길이는 차례대로 4, 0, 0, 2cm이다.
손님은 6cm만큼의 길이를 가져간다.

손님이 왔을 때 요청한 총 길이가 M일 때, 적어도 M만큼의 떡을 얻기 위해
절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하세요.

cf.
첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어진다. 
(1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)
둘째 줄에는 떡의 개별 높이가 주어진다. 
떡 높이의 총합은 항상 M 이상이므로, 손님은 필요한 양만큼 떡을 사갈 수 있다.
높이는 10억보다 작거나 같은 양의 정수 또는 0 이다.

input #1 N : 떡의 개수, M : 요청한 떡의 길이
4 6
19 15 10 17

output #1 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값
15
"""
# 떡의 개수(N)와 요청한 떡의 길이(M)을 입력
n, m = list(map(int, input().split(" ")))
# 각 떡의 개별 높이 정보를 입력
array = list(map(int, input().split()))

# 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)  # 초기 끝점은 가장 긴 떡의 길이(19)로 설정

# 이진 탐색 수행 (반복적)
result = 0
while start <= end:
    total = 0
    mid = (start + end) // 2
    for x in array:
        # 잘랐을 때의 떡볶이 양 계산
        if x > mid:
            total += x - mid
    # 떡볶이 양이 부족한 경우 더 많이 자르기 (오른쪽 부분 탐색)
    if total < m:
        end = mid - 1
    # 떡볶이 양이 충분한 경우 덜 자르기 (왼쪽 부분 탐색)
    else:
        result = mid  # 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록
        start = mid + 1

# 정답 출력
print(result)

"""Tip
전형적 이진 탐색문제이자, 파라메트릭 서치(Parametric Search) 유형의 문제
파라메트릭 서치는 최적화 문제를 결정 문제로 바꾸어 해결하는 기법
cf. 결정문제는 '예' 혹은 '아니오'를 답하는 문제를 말함

'원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제'에 주로 파라메트릭 서치를 사용
e.g. 범위 내 조건을 만족하는 가장 큰 값을 찾는 최적화 문제라면,
이진 탐색으로 결정문제를 해결하면서 범위를 좁혀갈 수 있다.
코테나 대회에서 보통 파라메트릭 서치 유형은 이진탐색을 이용해 해결한다.

아이디어는 적절한 높이를 찾을 떄까지 절단기 높이 H를 반복해서 조정하는 것
그래서 '현재 높이로 자르면 조건에 만족하는지?'를 확인 후
조건의 만족여부(True, False)에 따라 탐색범위를 이진탐색으로 좁혀서 해결한다.

절단기 높이는 1~10억까지 정수 중 하나인데,
이처럼 큰 수를 보면 가장 먼저 이진탐색을 떠올려야 한다.

(1)
시작점은 0, 끝점은 가장 긴 떡의 길이(19)로 설정
0~19사이의 중간점 9를 절단기 높이 H로 설정하면, 
얻을 수 있는 떡의 합은 (10 + 6 + 1 + 8) = 25이다.
필요한 떡의 길이가 6보다 크기때문에 시작점을 증가시킨다.

(2)
시작점을 10으로 옮기고 끝점은 여전히 19, 중간점은 14
절단기 높이 14로 설정하면 얻을 수 있는 떡의 합은 (5 + 1 + 3) = 9
필요한 떡의 길이가 6보다 크기때문에 시작점을 증가시킨다.

(3)
시작점을 15으로 옮기고 끝점은 여전히 19, 중간점은 17
절단기 높이 17로 설정하면 얻을 수 있는 떡의 합은 2
필요한 떡의 길이가 6보다 작기때문에 끝점을 감소시킨다.

(4)
시작점을 여전히 15, 끝점은 16으로 옮기고, 중간점은 15
절단기 높이 15로 설정하면 얻을 수 있는 떡의 합은 (4 + 2) = 6
필요한 떡의 길이가 6과 동일하다.

이러한 이진탐색 과정을 반복하면 답을 도출할 수 있다.
떡볶이 양에 따라 자를 위치를 결정해야 하기 때문에
재귀로 구현하기보다 파라메트릭 서치 문제 유형은 반복문이 더 간결하다.
"""
