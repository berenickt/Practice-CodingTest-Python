# 📚 https://www.acmicpc.net/problem/15483
"""
두 개의 문자열 A와 B가 주어졌을 때, 문자열 A를 편집하여 문자열 B로 만들고자 합니다.
문자열 A를 편집할 때는 다음의 세 연산 중에서 한 번에 하나씩 선택하여 이용할 수 있습니다.
1. 삽입(Insert): 특정한 위치에 하나의 문자를 삽입합니다.
2. 삭제(Remove): 특정한 위치에 있는 하나의 문자를 삭제합니다.
3. 교체(Replace): 특정한 위치에 있는 하나의 문자를 다른 문자로 교체합니다.

이때 `편집 거리`란 문자열 A를 편집하여 문자열 B로 만들기 위해 사용한 연산의 수를 의미합니다.
문자열 A를 문자열 B로 만드는 최소 편집 거리를 계산하는 프로그램을 작성하세요.
e.g. "sunday"와 "saturday"의 최소 편집 거리는 3입니다.
1. n -> r 교체  (surday)
2. a 삽입 (saurday)
3. t 삽입 (saturday)

cf.
두 문자열 A와 B가 한줄에 하나씩 주어집니다.
각 문자열은 영문 알파벳으로만 구성되어 있으며,
각 문자열의 길이는 1보다 크거나 같고, 5,000보다 작거나 같습니다.

input #1
cat
cut

output #1 최소 편집 거리
1

input #2
sunday
saturday

output #2 최소 편집 거리
3

Tip
최소 편집 거리를 담을 2차원 테이블을 초기화한 뒤에, 
최소 편집 거리를 계산해 테이블에 저장하는 과정으로 문제를 해결할 수 있다.

다이나믹 프로그래밍의 점화식은 다음과 같다.
```
# 두 문자가 같은 경우
dp[i][j] = dp[i - 1][j - 1]
# 두 문자가 다른 경우
dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])
```
이를 말로 풀어서 쓰면 다음과 같다.

행과 열에 해당하는 문자가 서로 같다면, 
    왼쪽 위에 해당하는 수를 그대로 대입
행과 열에 해당하는 문자가 서로 다르다면, 
    왼쪽(삽입), 위쪽(삭제), 왼쪽 위(교체)에 해당하는 수 중에서 가장 작은 수에 1을 더해 대입
"""


# 최소 편집 거리(Edit Distance) 계산을 위한 다이나믹 프로그래밍
def edit_dist(str1, str2):
    n = len(str1)
    m = len(str2)

    # 다이나믹 프로그래밍을 위한 2차원 DP 테이블 초기화
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # DP 테이블 초기 설정
    for i in range(1, n + 1):
        dp[i][0] = i
    for j in range(1, m + 1):
        dp[0][j] = j

    # 최소 편집 거리 계산
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            # 문자가 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            # 문자가 다르다면, 세 가지 경우 중에서 최솟값 찾기
            else:  # 삽입(왼쪽), 삭제(위쪽), 교체(왼쪽 위) 중에서 최소 비용을 찾아 대입
                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])

    return dp[n][m]


# 두 문자열을 입력 받기
str1 = input()
str2 = input()

# 최소 편집 거리 출력
print(edit_dist(str1, str2))
