"""
정리하자면, 다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 
같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.

이는, 퀵 정렬(quick_sort)와도 비슷한 기법인데 자세히 들여다보면 둘의 차이점이 있다.

퀵 정렬은 한번 pivot이 자리를 변경해 기준을 잡게 되면 해당 기준은 바뀌지 않고, 
그 피벗값을 다시 처리하는 동작이 없으나 
(return quick_sort(left) + [pivot] + quick_sort(right))

다이나믹 프로그래밍은 한 번 해결했던 문제를 다시금 해결하는 점이 두 함수의 차이점이다.

즉, 이미 해결이 됐으니 결과를 어딘가에 저장해놨다가 나중에 동일한 문제가 생기면 이미 저장한 값을 반환하는 것이다.

가능하다면 재귀 함수를 이용하는 top_down 방식보다는 bottom_up방식으로 구현하는 것을 권장한다.
시스템상 재귀 함수의 스택 크기가 한정되어 있을 수 있기 때문이다.

top_down(메모이제이션)은 '하향식'이라고도 하며,
bottom_up은 '상향식'이라고도 한다.
다이나믹 프로그래밍의 전형적인 형태는 bottom_up 방식이다.

만약, 재귀함수를 사용하다가 recursion depth(재귀 함수 깊이) 오류가 뜨면, 
sys - setrecursionlimit() 를 호출하도록 하자.
"""
