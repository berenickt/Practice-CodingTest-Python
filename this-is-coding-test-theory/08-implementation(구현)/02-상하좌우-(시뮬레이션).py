"""📍 simulation
알고리즘을 각 한 단계씩 직접 수행하는 알고리즘. 
Brute_force와 함께 구현의 핵심 알고리즘이 되는 경우가 많다.
N x N Matrix 문제로 자주 출제 됨.
"""

"""
여행가 A는 N x N 크기의 정사각형 공간 위에 서있다.
이 공간은 1 x 1 크기의 정사각형으로 나누어져있다.
가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다.
여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 
시작 좌표는 항상 (1, 1)이다.

우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여있다.
계획서에는 하나의 줄에 띄어쓰기를 기준으로 해서 
L, R, U, D 중 하나의 문자가 반복적으로 적혀있다. 

각 문자의 의미는 다음과 같다.
- L : 왼쪽으로 한 칸 이동
- R : 오른쪽으로 한 칸 이동
- U : 위로 한 칸 이동
- D : 아래로 한 칸 이동

이때 여행가 A가 N x N 크기의 정사각형 공간을 벗어나는 움직임은 무시된다.
예를 들어, (1, 1)의 위치에서 L 혹은 U를 만나면 무시된다

계획서가 주어졌을 떄, 
여행가 A가 최종적으로 도착할 지점의 좌표 (X, Y)를 공백을 기준으로 
구분하여 출력하는 프로그램을 작성하시오.

cf.
첫째 줄에 공간의 크기를 나타내는 N이 주어진다.(1 ≤ N ≤ 100)
둘째 줄부터 여행가 A가 이동할 계획서 내용이 주어진다. (1 <= 이동횟수 <= 100)

input #1
5
R R R U D D

output #1
3 4
"""

# N 입력받기
n = int(input())
plans = input().split()
x, y = 1, 1

# #### L, R, U, D에 따른 이동 방향
# 'L' : (0, -1) ==> 좌
# 'R' : (0,  1) ==> 우
# 'U' : (-1, 0) ==> 상
# 'D' : (1,  0) ==> 하
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ["L", "R", "U", "D"]

# 이동 계획을 하나씩 확인
for plan in plans:
    # 이동 후 좌표 구하기
    for i in range(len(move_types)):  # 4방향 순회
        # 해당 방향이면, x축, y축 방향으로 이동
        if plan == move_types[i]:
            nx = x + dx[i]  # nx ==> 1 1 1 0 2 3
            ny = y + dy[i]  # ny ==> 2 3 4 4 4 4
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    # 이동 수행
    x, y = nx, ny

print(x, y)
