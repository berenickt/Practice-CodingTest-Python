"""구현(implementation) 알고리즘
구현 알고리즘은 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정을 뜻한다.
사실 어떤 알고리즘을 풀더라도 문제를 해결하기 위해 소스코드를 작성하므로 모든 범위의 문제 유형을 포함하는 개념이다.

코딩테스트에 한정해서 구현은 풀이를 떠올리긴 쉽지만 소스코드로 옮기기는 쉽지 않은 문제를 의미한다.
특히, 사소한 조건 설정이 많은 문제일수록 코드로 구현하기 까다롭다.
이 책에서는 완전 탐색, 시뮬레이션 유형을 모두 구현 유형으로 묶어서 다루고 있다.

1. 완전 탐색: 모든 경우의 수를 주저 없이 다 계산하는 해결 방법
2. 시뮬레이션: 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행하는 방법
"""

"""파이썬에서의 리스트 크기
대체로 코딩 테스트에서는 128~512MB로 메모리를 제한하는데, 
이럴 때는 메모리 제한을 염두해두고 코딩을 해야한다.

예를 들어 우리가 흔히 사용하는 int자료형의 데이터 개수는 다음과 같다.

데이터의 개수(리스트의 길이)	메모리 사용량
1,000	                 약 4KB
1,000,000	             약 4MB
10,000,000	           약 40KB

파이썬은 다른 언어에 비해 구현상의 복잡함은 적지만, 
데이터 처리량이 많을 때는 꼭 메모리 제한을 고려하자.

만약, 크기가 1,000 이상인 리스트가 있다면, 
메모리 용량 제한으로 풀 수 없게 되는 경우도 있다는 점을 기억하자.

일반적인 기업의 코딩 테스트 환경에서는 
파이썬으로 제출한 코드가 1초에 20,000,000번의 연산을 수행한다고 가정하고 
문제를 풀면 실행 시간 제한에 안정적이다.
"""

"""Pypy3
파이썬3의 문법을 그대로 지원하면서, 파이썬3보다 실행속도가 빠름
Pypy3의 실행속도는 C/C++와 견줄만큼 빠르다.
기업의 코테 환경이 파이썬3만 지원하느지, 혹은 Pypy3도 지원하는지 확인하고,
Pypy3도 지원한다면 이용하도록 하자
"""
