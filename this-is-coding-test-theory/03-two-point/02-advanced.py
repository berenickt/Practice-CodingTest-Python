"""
이밖에도, 
투 포인터 알고리즘은 정렬되어 있는 두 리스트의 합집합 같은 문제에 효과적으로 사용 할 수 있다.

이때, 두 리스트의 모든 원소를 합쳐 정렬한 결과를 계산하는 것이 문제의 요구사항이다.

이 문제를 풀기 위해서는 2개의 리스트 A, B가 주어졌을 때, 
2개의 포인터를 이용하여 각 리스트에서 처리되지 않은 원소 중 가장 작은 원소를 가리키면된다. 
문제에서 이미 정렬된 결과가 주어지므로 앞에서부터 확인하면 된다.

풀이 순서는 다음과 같다.
1. 정렬된 리스트 A와 B를 받는다.
2. 리스트 A에서 처리되지 않은 원소 중 가장 작은 원소를 i가 가르키도록 한다.
3. 리스트 B에서 처리되지 않은 원소 중 가장 작은 원소를 j가 가르키도록 한다.
4. A[i]와 B[j] 중 더 작은 원소를 결과 리스트에 담는다.
5. 리스트 A와 B에서 더 이상 처리할 원소가 없을 때 까지 2번 ~ 4번의 과정을 반복한다.
"""
# 사전에 정렬된 리스트 A와 B 선언
n, m = 3, 4
a = [1, 3, 5]
b = [2, 4, 6, 8]

# 리스트 A와 B의 모든 원소를 담을 수 있는 크기의 결과 리스트 초기화
result = [0] * (n + m)
i = 0
j = 0
k = 0

# 모든 원소가 결과 리스트에 담길 때까지 반복
while i < n or j < m:
    # 리스트 B의 모든 원소가 처리되었거나, 리스트 A의 원소가 더 작을 때
    if j >= m or (i < n and a[i] <= b[j]):
        # 리스트 A의 원소를 결과 리스트로 옮기기
        result[k] = a[i]
        i += 1
    # 리스트 A의 모든 원소가 처리되었거나, 리스트 B의 원소가 더 작을 때
    else:
        # 리스트 B의 원소를 결과 리스트로 옮기기
        result[k] = b[j]
        j += 1
    k += 1

# 결과 리스트 출력
for i in result:
    print(i, end=" ")
# 👉 1 2 3 4 5 6 8

"""
결과적으로 이 알고리즘의 복잡도는 O(N+M)이 된다.
단순하게 각 리스트의 모든 원소를 한 번씩만 순회하면 되기 때문이다.

이 알고리즘의 경우 병합(Merge) 정렬과 같은 
일부 알고리즘에서 사용되고 있다는 점까지 기억하고 있자.
"""
