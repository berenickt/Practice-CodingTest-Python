# 💡 2×n 타일링 📚 https://www.acmicpc.net/problem/11726
"""
동적 계획법의 핵심은 점화식을 찾는 것
D[n] = 2 * n 직사각형을 채우는 방법의 수
2 * n 직사각형이 있을 떄, 가장 오른쪽에 타일을 놓을 수 있는 방법은 총 2가지(세로1개, 가로 2개)
dp[i] = dp[i - 1] + dp[i - 2]
"""

# 사용자로부터 정수 n을 입력받음
n = int(input())

# Fibonacci 수열의 각 항을 저장하기 위한 배열 d를 초기화
dp = [0] * 1001

# 0번째 항, 1번째 항은 1로 초기화
dp[0] = 1
dp[1] = 1

# Fibonacci 수열을 계산
for i in range(2, n + 1):
    # 현재 항은 이전 두 항의 합으로 계산
    dp[i] = dp[i - 1] + dp[i - 2]

    # 각 항을 10007로 나눈 나머지를 저장합니다 (정수 오버플로우 방지)
    dp[i] %= 10007

# n번째 Fibonacci 수를 출력
print(dp[n])
