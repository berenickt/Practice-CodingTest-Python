"""다음은 지금까지 다룬 정렬 알고리즘을 비교한 표이다.
💡 선택 정렬
- 평균 시간 복잡도   : O(N^2)
- 최악의 시간 복잡도 : O(N^2)
- 공간 복잡도       : O(N)
- 아이디어가 매우 간단하다.

💡 삽입 정렬
- 평균 시간 복잡도   : O(N^2)
- 최악의 시간 복잡도 : O(N^2)
- 공간 복잡도       : O(N)
- 데이터가 거의 정렬되어 있을 때는 가장 빠르다.

💡 퀵 정렬	
- 평균 시간 복잡도   : O(NlogN)
- 최악의 시간 복잡도 : O(N^2)
- 공간 복잡도       : O(N)
- 대부분의 경우에 가장 적합하고, 충분히 빠르다.

💡 계수 정렬
- 평균 시간 복잡도   : O(N+K)
- 최악의 시간 복잡도  : O(N+K)
- 공간 복잡도       : K값에 따라 다름
- 사용조건을 만족하면 매우 빠르게 동작한다.
"""

"""📍 파이썬의 정렬 라이브러리
파이썬은 기본 정렬 라이브러리인 sorted() 함수를 제공한다.
sorted()는 퀵 정렬과 동작 방식이 비슷한 
병합 정렬(정확히는 병합 정렬 + 삽입 정렬을 합친 하이브리드 정렬 알고리즘)기반으로 만들어졌는데

병합 정렬은 일반적으로 퀵 정렬보다 느리지만 최악의 경우에도 시간복잡도(O(NlogN))을 보장한다는 특징이 있다.

코딩테스트에서 정렬 알고리즘이 사용되는 경우를 일반적으로 3가지 문제 유형으로 나타낼 수 있다.

1. 정렬 라이브러리로 풀 수 있는 문제 : 
    정렬 라이브러리(sort) 사용방법을 숙지하면 어렵지 않게 풀 수 있다.
2. 정렬 알고리즘의 원리에 대해서 물어보는 문제: 
    선택 정렬, 삽입 정렬, 퀵 정렬 등의 원리를 알고 있어야 문제를 풀 수 있다.
3. 더 빠른 정렬이 필요한 문제: 퀵 정렬 기반의 문제는 풀 수 없으며, 
    계수 정렬 등의 다른 정렬 알고리즘을 이용하거나,
    문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있다.
"""
