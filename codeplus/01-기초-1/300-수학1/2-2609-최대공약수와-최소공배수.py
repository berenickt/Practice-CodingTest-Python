# 💡 최대공약수와 최소공배수 📚 https://www.acmicpc.net/problem/2609
"""
📌 최대공약수 (Greatest Common Divisor)
정의 : 주어진 두 수 x, y에서 x의 약수이면서 y의 약수인 수 중 최대값
1부터 x 또는 y 중 작은 값까지 반복하며 값을 구할 수 있지만, 
유클리드 호제법(Euclidean algorithm)을 이용하면 간단하게 계산 가능

유클리드 호제법의 공식=============================
최대공약수를 구하는 함수를 gcd(x,y)라고 가정
x % y = 0이라면 gcd(x, y) = y가 성립
x % y != 0이라면 gcd(x, y) = gcd(x, x % y)가 성립
2번이 될 때까지 2~3번을 반복
==================================================

e.g. 1071과 1029의 최대공약수를 유클리드 호제법을 활용해 계산
1071은 1029로 딱 나눠지지 않기 때문에 1071을 1029로 나눈 나머지를 구함 -> 42
1029는 42로 딱 나눠지지 않기 때문에 1029를 42로 나눈 나머지를 구함 -> 21
42는 21로 나눠짐
최대공약수는 21

def gcd(x, y):
   # y가 0이 될 때까지 반복
   while y:
       # y를 x에 대입
       # x를 y로 나눈 나머지를 y에 대입
       x, y = y, x % y
   return x

파이썬에서는 이를 구현할 필요없이 내장함수 math 모듈에서 기능을 제공해줌
from math import gcd
print(gcd(1071, 1029))


📌 최소공배수 (Least Common Multiple) ==================
x와 y의 공통된 배수 가운데 최소값을 의미
주어진 수인 x,y의 곱에서 x, y의 최대공약수를 나누어 준 몫과 같음
cf. 파이썬에서 // 연산자는 나눈 값의 몫을 반환
"""


# 최대공약수(GCD)를 계산하는 함수를 정의
def gcd(x, y):
    # 만약 y가 0이라면 x를 반환, 이것이 GCD의 종료 조건
    if y == 0:
        return x
    # y가 0이 아니라면, x를 y로 나눈 나머지를 계산하여 재귀적으로 GCD 함수를 호출
    else:
        return gcd(y, x % y)


# 사용자로부터 두 개의 정수를 입력받고, 입력값을 공백을 기준으로 분리하여 정수 변수 a와 b에 할당합
a, b = map(int, input().split())

# 입력받은 두 정수 a와 b의 최대공약수(GCD)를 계산하고 출력
g = gcd(a, b)
print(g)

# a와 b의 최소공배수(LCM)를 계산하고 출력, LCM은 (a * b) / GCD 로 계산됨
print(a * b // g)
